// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	//zx
	Mux16(a = x, b = false, sel = zx, out = op01);
	
	//nx
	Not16(in = op01, out = op0201);
	Mux16(a = op01, b = op0201, sel = nx, out = op02);
	
	//zy
	Mux16(a = y, b = false, sel = zy, out = op03);
	
	//ny
	Not16(in = op03, out = op0401);
	Mux16(a = op03, b = op0401, sel = ny, out = op04);
	
	//f
	And16(a = op02, b = op04, out = op0501);
	Add16(a = op02, b = op04, out = op0502);
	Mux16(a = op0501, b = op0502, sel = f, out = op05);
	
	//no and ng
	Not16(in = op05, out = op0601);
	Mux16(a = op05, b = op0601, sel = no, out = out, out[0..7] = op0602, out[8..15] = op0603, out[15] = ng);
	
	//zr
	Or8Way(in = op0602, out = op0701);
	Or8Way(in = op0603, out = op0702);
	Or(a = op0701, b = op0702, out = op07);
	Not(in = op07, out = zr);	
}